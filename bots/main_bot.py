import html
import sys
import codecs
from datetime import datetime
from telebot import TeleBot, types

# === –ò–º–ø–æ—Ä—Ç –∏–∑ —è–¥—Ä–∞ ===
from core.data_manager import log, load_json, save_json
from core.user_manager import init_user
from core.articles import load_articles, get_article, mark_article_as_read, get_user_articles_progress
from core.leaderboard import update_leaderboard, get_leaderboard_display_name
from core.quizzes import get_quiz, finalize_quiz_for_user
from core.moderation_manager import add_suggestion
from config import MAIN_BOT_TOKEN, USERS_FILE, USER_STATES_FILE

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ (–¥–ª—è Windows-–∫–æ–Ω—Å–æ–ª–∏) ===
if sys.stdout.encoding != 'utf-8':
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ===
bot = TeleBot(MAIN_BOT_TOKEN)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
user_states = load_json(USER_STATES_FILE)
active_quizzes = {}


# ===============================
# üí¨ –ö–æ–º–∞–Ω–¥–∞ /start
# ===============================
@bot.message_handler(commands=['start'])
def start(message):
    user = init_user(message.chat.id, message.from_user.username, message.from_user.first_name)
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{html.escape(user['first_name'])}</b>!\n\n"
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CodeForge</b> ‚Äî –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
        f"‚ú® <b>–¢—ã –º–æ–∂–µ—à—å:</b>\n"
        f"‚Ä¢ üìö –ò–∑—É—á–∞—Ç—å —è–∑—ã–∫–∏\n"
        f"‚Ä¢ üß† –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã\n"
        f"‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"
        f"‚Ä¢ üèÜ –°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ\n"
        f"‚Ä¢ üí° –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n\n"
        f"<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìö –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data='progress'))
    markup.add(types.InlineKeyboardButton('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', callback_data='leaderboard'))
    markup.add(types.InlineKeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='suggestion'))
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='HTML')

    user_states[str(message.chat.id)] = 'main_menu'
    save_json(user_states, USER_STATES_FILE)


# ===============================
# üìö –ú–µ–Ω—é —è–∑—ã–∫–æ–≤
# ===============================
def show_languages_menu(chat_id, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)

    markup = types.InlineKeyboardMarkup()
    for lang in ['VBA', 'C', 'Bash', 'Python', 'JavaScript']:
        markup.add(types.InlineKeyboardButton(lang, callback_data=lang))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))

    bot.send_message(chat_id, 'üìö <b>–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>', parse_mode='HTML', reply_markup=markup)
    user_states[str(chat_id)] = 'languages'
    save_json(user_states, USER_STATES_FILE)


# ===============================
# üß† –ú–µ–Ω—é —Ç–µ—Å—Ç–æ–≤
# ===============================
def show_quiz_selection(chat_id, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)

    markup = types.InlineKeyboardMarkup()
    for lang in ['VBA', 'C', 'Bash', 'Python', 'JavaScript']:
        markup.add(types.InlineKeyboardButton(f'üß† {lang} - –û—Å–Ω–æ–≤—ã', callback_data=f'quiz_{lang}_basic'))
    markup.add(types.InlineKeyboardButton('üß† –¢–µ—Å—Ç –ø–æ –≤—Å–µ–º —Ç–µ–º–∞–º', callback_data='quiz_Big_Test'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))

    bot.send_message(chat_id, 'üß† <b>–í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç:</b>', parse_mode='HTML', reply_markup=markup)
    user_states[str(chat_id)] = 'quiz_selection'
    save_json(user_states, USER_STATES_FILE)


# ===============================
# üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥
# ===============================
def show_leaderboard(chat_id, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)
    leaderboard = update_leaderboard()
    ranking = leaderboard.get('ranking', [])[:15]
    text = "üèÜ <b>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
    if not ranking:
        text += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –æ—á–∫–æ–≤."
    else:
        for i, u in enumerate(ranking):
            medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else f"{i+1}."
            text += f"{medal} <b>{get_leaderboard_display_name(u)}</b> ‚Äî ‚≠ê {u['total_points']} –æ—á–∫–æ–≤\n"
    text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {leaderboard['last_updated']}"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='leaderboard'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')


# ===============================
# üìä –ü—Ä–æ–≥—Ä–µ—Å—Å
# ===============================
def show_progress(chat_id):
    users = load_json(USERS_FILE)
    uid = str(chat_id)
    if uid not in users:
        bot.send_message(chat_id, "–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return
    u = users[uid]
    text = (
        f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n\n"
        f"üë§ <b>{html.escape(u['first_name'])}</b>\n"
        f"üìÖ –° {u['joined_date']}\n"
        f"üèÜ –û—á–∫–æ–≤: {u['total_points']}\n"
        f"üìö –°—Ç–∞—Ç–µ–π: {u['stats']['articles_read']}\n"
        f"üß† –¢–µ—Å—Ç–æ–≤: {u['stats']['quizzes_taken']}\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {u['stats']['average_score']}%\n"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥', callback_data='leaderboard'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)


# ===============================
# üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
# ===============================
@bot.message_handler(func=lambda m: user_states.get(str(m.chat.id)) == 'suggestion_wait')
def handle_suggestion(message):
    text = message.text.strip()
    success = add_suggestion(message.chat.id, message.from_user.username, message.from_user.first_name, text)
    if success:
        bot.send_message(message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    else:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    user_states[str(message.chat.id)] = 'main_menu'
    save_json(user_states, USER_STATES_FILE)
    start(message)


# ===============================
# üéØ Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# ===============================
@bot.callback_query_handler(func=lambda c: True)
def handle_callbacks(call):
    uid = call.message.chat.id
    data = call.data

    try:
        if data == 'languages':
            show_languages_menu(uid, call.message.message_id)
        elif data == 'take_quiz':
            show_quiz_selection(uid, call.message.message_id)
        elif data == 'leaderboard':
            show_leaderboard(uid, call.message.message_id)
        elif data == 'progress':
            bot.delete_message(uid, call.message.message_id)
            show_progress(uid)
        elif data == 'suggestion':
            bot.delete_message(uid, call.message.message_id)
            bot.send_message(uid, "üí° –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:")
            user_states[str(uid)] = 'suggestion_wait'
            save_json(user_states, USER_STATES_FILE)
        elif data == 'back_main':
            bot.delete_message(uid, call.message.message_id)
            start(call.message)

        elif data in ['VBA', 'C', 'Bash', 'Python', 'JavaScript']:
            show_language_articles(uid, data, call.message.message_id)

        elif data.startswith('quiz_'):
            quiz_id = data.replace('quiz_', '')
            show_quiz_info(uid, quiz_id, call.message.message_id)

        elif data.startswith('start_quiz_'):
            quiz_id = data.split('start_quiz_')[1]
            start_quiz(uid, quiz_id, call.message.message_id)

        elif data.startswith('answer_'):
            handle_quiz_answer(call)

        elif data.startswith('article::'):
            _, lang, article_key = data.split('::')
            show_article(uid, lang, article_key, call.message.message_id)

        elif data.startswith('mark_read::'):
            _, lang, article_key = data.split('::')
            if mark_article_as_read(uid, lang, article_key):
                bot.answer_callback_query(call.id, "‚úÖ –°—Ç–∞—Ç—å—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è!")
                show_article(uid, lang, article_key, call.message.message_id)
            else:
                bot.answer_callback_query(call.id, "‚ùå –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–∞ —Ä–∞–Ω–µ–µ")

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ callback: {e}")
        bot.send_message(uid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# ===============================
# üìö –ú–µ–Ω—é —Å—Ç–∞—Ç–µ–π –¥–ª—è —è–∑—ã–∫–∞
# ===============================
def show_language_articles(chat_id, language, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)
    articles = load_articles().get(language, {})
    user_progress = get_user_articles_progress(chat_id, language)

    markup = types.InlineKeyboardMarkup()
    for key, art in articles.items():
        emoji = "‚úÖ" if key in user_progress else "üìñ"
        markup.add(types.InlineKeyboardButton(f"{emoji} {art['title']}", callback_data=f"article::{language}::{key}"))

    markup.add(types.InlineKeyboardButton('üìö –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))

    bot.send_message(chat_id, f"üìö <b>{language}</b> ‚Äî –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—å—é:", parse_mode='HTML', reply_markup=markup)


# ===============================
# üìñ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—å–∏
# ===============================
def show_article(chat_id, language, key, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)
    article = get_article(language, key)
    if not article:
        bot.send_message(chat_id, "‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    user_progress = get_user_articles_progress(chat_id, language)
    is_read = key in user_progress
    text = (
        f"üìñ <b>{article['title']}</b>\n\n"
        f"{article['description']}\n\n"
        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {article['difficulty']}\n"
        f"‚è± –í—Ä–µ–º—è: {article['estimated_time']}\n"
        f"üèÜ –ù–∞–≥—Ä–∞–¥–∞: {article['points']} –æ—á–∫–æ–≤\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {'‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ' if is_read else '‚ùå –ù–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ'}"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç–∞—Ç—å–µ', url=article['url']))
    if not is_read:
        markup.add(types.InlineKeyboardButton('‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é', callback_data=f'mark_read::{language}::{key}'))
    markup.add(types.InlineKeyboardButton('üìö –ù–∞–∑–∞–¥', callback_data=language))
    bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)


# ===============================
# üß† –ö–≤–∏–∑—ã
# ===============================
def show_quiz_info(chat_id, quiz_id, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)
    quiz = get_quiz(quiz_id)
    if not quiz:
        bot.send_message(chat_id, "‚ùå –≠—Ç–æ—Ç —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    text = (
        f"üß† <b>{quiz['title']}</b>\n\n"
        f"{quiz['description']}\n\n"
        f"‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å: {quiz['difficulty']}\n"
        f"‚è± –í—Ä–µ–º—è: {quiz['time_limit']} —Å–µ–∫\n"
        f"üìä –í–æ–ø—Ä–æ—Å–æ–≤: {len(quiz['questions'])}\n"
        f"üèÜ –ú–∞–∫—Å–∏–º—É–º: {quiz['total_points']}\n"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üöÄ –ù–∞—á–∞—Ç—å', callback_data=f'start_quiz_{quiz_id}'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=markup)


def start_quiz(chat_id, quiz_id, message_id=None):
    if message_id:
        bot.delete_message(chat_id, message_id)
    quiz = get_quiz(quiz_id)
    if not quiz:
        bot.send_message(chat_id, "‚ùå –ö–≤–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    active_quizzes[chat_id] = {"quiz": quiz, "score": 0, "current": 0}
    send_quiz_question(chat_id)


def send_quiz_question(chat_id):
    data = active_quizzes.get(chat_id)
    if not data:
        return
    quiz = data["quiz"]
    index = data["current"]
    if index >= len(quiz['questions']):
        finish_quiz(chat_id)
        return
    q = quiz['questions'][index]
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞
    question_text = html.escape(q['question_text'])
    
    markup = types.InlineKeyboardMarkup()
    for i, opt in enumerate(q['options']):
        # –¢–∞–∫–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        escaped_opt = html.escape(opt)
        markup.add(types.InlineKeyboardButton(escaped_opt, callback_data=f'answer_{index}_{i}'))
    
    bot.send_message(chat_id, f"‚ùì <b>{question_text}</b>", parse_mode='HTML', reply_markup=markup)


def handle_quiz_answer(call):
    uid = call.message.chat.id
    data = call.data.split('_')
    q_index, ans_index = int(data[1]), int(data[2])
    quiz_data = active_quizzes.get(uid)
    if not quiz_data:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –¢–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return
    quiz = quiz_data['quiz']
    q = quiz['questions'][q_index]
    correct = q['correct_answer']
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    correct_answer_text = html.escape(q['options'][correct])
    
    if ans_index == correct:
        quiz_data['score'] += q['points']
        bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{q['points']}")
    else:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_text}")
    
    bot.delete_message(uid, call.message.message_id)
    quiz_data['current'] += 1
    send_quiz_question(uid)


def finish_quiz(chat_id):
    data = active_quizzes.pop(chat_id, None)
    if not data:
        return
    quiz = data['quiz']
    score = data['score']
    max_score = quiz['total_points']
    finalize_quiz_for_user(chat_id, quiz['quiz_id'], score, max_score)
    percent = round(score / max_score * 100, 1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_main'))
    
    bot.send_message(
        chat_id, 
        f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n<b>{quiz['title']}</b>\n"
        f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{max_score} ({percent}%)",
        parse_mode='HTML',
        reply_markup=markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    )


if __name__ == "__main__":
    log("üöÄ Main bot –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()

