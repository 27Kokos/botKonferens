from telebot import TeleBot, types
from datetime import datetime

# === –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —è–¥—Ä–∞ ===
from core.data_manager import log
from core.moderation_manager import (
    get_pending_suggestions,
    get_processed_suggestions,
    update_suggestion_status,
    get_stats,
)
from core.user_manager import (
    get_all_users,
    reset_all_users_progress,
    delete_all_users,
    reset_user_progress,
)
from core.leaderboard import update_leaderboard
from config import MODERATOR_BOT_TOKEN


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
moderator_bot = TeleBot(MODERATOR_BOT_TOKEN)


# ===============================
# üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ===============================
@moderator_bot.message_handler(commands=['start'])
def start(message):
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!</b>\n\n"
        "üõ† <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="suggestions"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    markup.add(types.InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="reset_progress"))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_menu"))
    moderator_bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=markup)


# ===============================
# üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
# ===============================
def show_pending_suggestions(chat_id):
    suggestions = get_pending_suggestions()
    if not suggestions:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main"))
        moderator_bot.send_message(chat_id, "‚úÖ –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=markup)
        return

    for s in suggestions:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve::{s['id']}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject::{s['id']}")
        )
        moderator_bot.send_message(
            chat_id,
            f"üí° <b>–û—Ç @{s['user_data']['username'] or s['user_data']['first_name']}:</b>\n\n"
            f"{s['content']}",
            parse_mode="HTML",
            reply_markup=markup,
        )

    # –∫–Ω–æ–ø–∫–∞ ¬´–Ω–∞–∑–∞–¥¬ª
    back = types.InlineKeyboardMarkup()
    back.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main"))
    moderator_bot.send_message(chat_id, "üì¨ –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", reply_markup=back)


def show_processed_suggestions(chat_id):
    processed = get_processed_suggestions(limit=15)
    if not processed:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="stats"))
        moderator_bot.send_message(chat_id, "üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", reply_markup=markup)
        return
    text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:</b>\n\n"
    for s in processed:
        icon = "‚úÖ" if s["status"] == "approved" else "‚ùå"
        text += f"{icon} {s['content'][:50]}... ({s['status']})\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="stats"))
    moderator_bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)


# ===============================
# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
# ===============================
def show_stats(chat_id):
    stats = get_stats()
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:</b>\n\n"
        f"üí° –í—Å–µ–≥–æ: {stats['total']}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['rejected']}\n"
        f"üïì –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['pending']}"
    )
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="processed"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main"))
    moderator_bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)


# ===============================
# ‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
# ===============================
def show_users_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users"))
    markup.add(types.InlineKeyboardButton("üßπ –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö", callback_data="delete_all_users"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main"))
    moderator_bot.send_message(chat_id, "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>", parse_mode="HTML", reply_markup=markup)


def show_all_users(chat_id):
    users = get_all_users()
    if not users:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="users_menu"))
        moderator_bot.send_message(chat_id, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=markup)
        return
    text = "<b>üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
    for uid, u in users.items():
        text += f"‚Ä¢ {u['first_name']} (@{u['username'] or '–Ω–µ—Ç'}) ‚Äî {u['total_points']}‚≠ê\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="users_menu"))
    moderator_bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)


# ===============================
# üßπ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
# ===============================
def show_reset_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ—Ö", callback_data="reset_all"))
    markup.add(types.InlineKeyboardButton("üë§ –°–±—Ä–æ—Å–∏—Ç—å –æ–¥–Ω–æ–≥–æ", callback_data="reset_one_menu"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_main"))
    moderator_bot.send_message(chat_id, "üßπ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", parse_mode="HTML", reply_markup=markup)


def show_reset_one_menu(chat_id):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞"""
    users = get_all_users()
    if not users:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="reset_progress"))
        moderator_bot.send_message(chat_id, "üì≠ –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–±—Ä–æ—Å–∞.", reply_markup=markup)
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    for uid, u in users.items():
        name = f"{u['first_name']} (@{u['username'] or '–Ω–µ—Ç'})"
        markup.add(types.InlineKeyboardButton(f"üßπ {name}", callback_data=f"reset_user::{uid}"))
    markup.add(types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="reset_progress"))
    moderator_bot.send_message(chat_id, "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–±—Ä–æ—Å–∞:</b>", parse_mode="HTML", reply_markup=markup)


# ===============================
# üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
# ===============================
@moderator_bot.callback_query_handler(func=lambda c: True)
def handle_callbacks(call):
    data = call.data
    chat_id = call.message.chat.id

    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == "back_main":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            start(call.message)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        elif data == "suggestions":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_pending_suggestions(chat_id)
        elif data == "processed":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_processed_suggestions(chat_id)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elif data == "stats":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_stats(chat_id)

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        elif data == "users_menu":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_users_menu(chat_id)
        elif data == "all_users":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_all_users(chat_id)
        elif data == "delete_all_users":
            delete_all_users()
            moderator_bot.send_message(chat_id, "üßπ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

        # –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        elif data == "reset_progress":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_reset_menu(chat_id)
        elif data == "reset_all":
            reset_all_users_progress()
            update_leaderboard()
            moderator_bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω.")
        elif data == "reset_one_menu":
            moderator_bot.delete_message(chat_id, call.message.message_id)
            show_reset_one_menu(chat_id)
        elif data.startswith("reset_user::"):
            uid = data.split("::")[1]
            reset_user_progress(uid)
            update_leaderboard()
            moderator_bot.send_message(chat_id, f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —Å–±—Ä–æ—à–µ–Ω.")

        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
        elif data.startswith("approve::"):
            suggestion_id = data.split("::")[1]
            update_suggestion_status(suggestion_id, "approved", chat_id)
            moderator_bot.answer_callback_query(call.id, "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ")
            moderator_bot.delete_message(chat_id, call.message.message_id)
        elif data.startswith("reject::"):
            suggestion_id = data.split("::")[1]
            update_suggestion_status(suggestion_id, "rejected", chat_id)
            moderator_bot.answer_callback_query(call.id, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            moderator_bot.delete_message(chat_id, call.message.message_id)

    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ moderator_bot: {e}")
        moderator_bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


# ===============================
# üöÄ –ó–∞–ø—É—Å–∫
# ===============================
if __name__ == "__main__":
    log("[MODERATOR BOT] –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞...")
    moderator_bot.infinity_polling()
