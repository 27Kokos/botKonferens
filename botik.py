import telebot
from telebot import types
import json
import os
from datetime import datetime
import html

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–æ–≤
bot = telebot.TeleBot('8317740647:AAEsqXPmGOrZSgDbaIMUnJPvnBO_ZYFvfgQ') 

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
USER_STATES_FILE = 'user_states.json'
USERS_FILE = 'users.json'
QUIZZES_FILE = 'quizzes.json'
LEADERBOARD_FILE = 'leaderboard.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON {file_path}. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            return {}
    return {}

def save_data(data, file_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {file_path}: {e}")
        return False

def init_user(user_id, username, first_name):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_data(USERS_FILE)
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        users[user_id_str] = {
            "user_id": user_id,
            "username": username or "–±–µ–∑ username",
            "first_name": first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "joined_date": datetime.now().strftime("%Y-%m-%d"),
            "total_points": 0,
            "progress": {
                "articles_viewed": {},
                "quizzes_completed": {},
                "achievements": []
            },
            "stats": {
                "quizzes_taken": 0,
                "articles_read": 0,
                "average_score": 0
            }
        }
        save_data(users, USERS_FILE)
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username or first_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}")
    
    return users[user_id_str]

def update_user_progress(user_id, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_data(USERS_FILE)
    user_id_str = str(user_id)
    
    if user_id_str in users:
        users[user_id_str].update(data)
        save_data(users, USERS_FILE)
        return True
    return False

def get_quiz(quiz_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞"""
    quizzes = load_data(QUIZZES_FILE)
    return quizzes.get(quiz_id)

def update_user_after_quiz(user_id, quiz_id, score, max_score):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    users = load_data(USERS_FILE)
    user_id_str = str(user_id)
    
    if user_id_str in users:
        user = users[user_id_str]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        user['progress']['quizzes_completed'][quiz_id] = {
            'score': score,
            'max_score': max_score,
            'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—á–∫–∏
        user['total_points'] += score
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user['stats']['quizzes_taken'] += 1
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        total_quizzes = user['stats']['quizzes_taken']
        if total_quizzes > 0:
            total_score = sum([q['score'] for q in user['progress']['quizzes_completed'].values()])
            total_max = sum([q['max_score'] for q in user['progress']['quizzes_completed'].values()])
            user['stats']['average_score'] = round((total_score / total_max) * 100, 2) if total_max > 0 else 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if score == max_score and 'perfect_score' not in user['progress']['achievements']:
            user['progress']['achievements'].append('perfect_score')
        if total_quizzes == 1 and 'first_quiz' not in user['progress']['achievements']:
            user['progress']['achievements'].append('first_quiz')
        
        save_data(users, USERS_FILE)
        return True
    return False

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = load_data(USER_STATES_FILE)
print("–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", user_states)

# –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: {quiz_data, current_question, answers}}
active_quizzes = {}

@bot.message_handler(commands=['start'])
def start(message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = init_user(
        message.chat.id, 
        message.from_user.username, 
        message.from_user.first_name
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{html.escape(message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</b>!\n\n"
        f"üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>CodeForge</b> - —Ç–≤–æ—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
        f"‚ú® <b>–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:</b>\n"
        f"‚Ä¢ üìö –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ä–∞–∑–Ω—ã–º —è–∑—ã–∫–∞–º\n"
        f"‚Ä¢ üß† –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö\n"
        f"‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"
        f"‚Ä¢ üèÜ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        f"<b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìö –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data='progress'))
    markup.add(types.InlineKeyboardButton('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='predlozka'))
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup, parse_mode='HTML')
    
    user_states[str(message.chat.id)] = 'main_menu'
    save_data(user_states, USER_STATES_FILE)

@bot.message_handler(commands=['progress'])
def progress_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    show_progress(message.chat.id)

def show_progress(chat_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_data(USERS_FILE)
    user_id_str = str(chat_id)
    
    if user_id_str not in users:
        bot.send_message(chat_id, "–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—É—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    user = users[user_id_str]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_quizzes = user['stats']['quizzes_taken']
    total_articles = user['stats']['articles_read']
    avg_score = user['stats']['average_score']
    total_points = user['total_points']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
    progress_text = (
        f"üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ CodeForge</b>\n\n"
        f"üë§ <b>{html.escape(user['first_name'])}</b>\n"
        f"üìÖ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {html.escape(user['joined_date'])}\n"
        f"üèÜ <b>–í—Å–µ–≥–æ –æ—á–∫–æ–≤:</b> {total_points}\n"
        f"üìö <b>–ü—Ä–æ—á–∏—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π:</b> {total_articles}\n"
        f"üß† <b>–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤:</b> {total_quizzes}\n"
        f"üìà <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score}%\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
    if user['progress']['quizzes_completed']:
        progress_text += "\nüéØ <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:</b>\n"
        for quiz_name, result in user['progress']['quizzes_completed'].items():
            percentage = (result['score'] / result['max_score']) * 100
            progress_text += f"‚Ä¢ <b>{html.escape(quiz_name)}</b>: {result['score']}/{result['max_score']} ({percentage:.1f}%)\n"
    else:
        progress_text += "\nüéØ <b>–ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:</b> –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if user['progress']['achievements']:
        achievements_text = {
            'perfect_score': 'üéñ –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'first_quiz': 'ü•á –ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç'
        }
        user_achievements = [achievements_text.get(a, a) for a in user['progress']['achievements']]
        progress_text += f"\nüèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n" + "\n".join([f"‚Ä¢ {a}" for a in user_achievements])
    else:
        progress_text += "\nüèÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b> –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üìö –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, progress_text, reply_markup=markup, parse_mode='HTML')

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    user_id = callback.message.chat.id
    user_id_str = str(user_id)
    current_state = user_states.get(user_id_str, 'main_menu')
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if callback.data == 'languages':
            show_languages_menu(user_id, callback.message.message_id)
            
        elif callback.data == 'take_quiz':
            show_quiz_selection(user_id, callback.message.message_id)
        
        elif callback.data == 'progress':
            bot.delete_message(user_id, callback.message.message_id)
            show_progress(user_id)
        
        elif callback.data == 'predlozka': 
            bot.delete_message(user_id, callback.message.message_id)
            bot.send_message(user_id, 
                            'üí° <b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n'
                            '–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –±–æ—Ç–∞!', 
                            parse_mode='HTML')
            user_states[user_id_str] = 'predlozka_menu'
            save_data(user_states, USER_STATES_FILE)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        elif callback.data == 'back_to_main':
            bot.delete_message(user_id, callback.message.message_id)
            start(callback.message)
        
        elif callback.data == 'back_to_languages':
            bot.delete_message(user_id, callback.message.message_id)
            show_languages_menu(user_id, None)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        elif callback.data in ['VBA', 'C', 'Bash', 'Python', 'JavaScript']:
            show_language_specific_menu(user_id, callback.data, callback.message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        elif callback.data.startswith('quiz_'):
            quiz_id = callback.data[5:]  # –£–±–∏—Ä–∞–µ–º 'quiz_'
            show_quiz_info(user_id, quiz_id, callback.message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
        elif callback.data.startswith('start_quiz_'):
            quiz_id = callback.data[11:]  # –£–±–∏—Ä–∞–µ–º 'start_quiz_'
            start_quiz(user_id, quiz_id, callback.message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ
        elif callback.data.startswith('answer_'):
            handle_quiz_answer(callback)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        elif callback.data == 'end_quiz':
            end_quiz_early(user_id, callback.message.message_id)
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def show_languages_menu(chat_id, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤"""
    if message_id:
        bot.delete_message(chat_id, message_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('VBA', callback_data='VBA'))
    markup.add(types.InlineKeyboardButton('C', callback_data='C'))
    markup.add(types.InlineKeyboardButton('Bash', callback_data='Bash'))
    markup.add(types.InlineKeyboardButton('Python', callback_data='Python'))
    markup.add(types.InlineKeyboardButton('JavaScript', callback_data='JavaScript'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, 
                    'üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n'
                    '–ò–∑—É—á–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É.', 
                    reply_markup=markup, parse_mode='HTML')
    
    user_states[str(chat_id)] = 'languages_menu'
    save_data(user_states, USER_STATES_FILE)

def show_language_specific_menu(chat_id, language, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    bot.delete_message(chat_id, message_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    language_data = {
        'VBA': {
            'articles': [
                ('üìñ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Tipy-dannyh-12-16-2'),
                ('üìñ –í–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Vvod-i-vyvod-dannyh-12-16-2'),
                ('üìñ –§—É–Ω–∫—Ü–∏–∏', 'https://telegra.ph/Funkcii-12-16-3')
            ],
            'quiz_id': 'VBA_basic'
        },
        'C': {
            'articles': [
                ('üìñ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Osnovnye-tipy-dannyh-12-16'),
                ('üìñ –í–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Vvod-dannyh-12-16'),
                ('üìñ –§—É–Ω–∫—Ü–∏–∏', 'https://telegra.ph/Funkcii-12-16')
            ],
            'quiz_id': 'C_basic'
        },
        'Bash': {
            'articles': [
                ('üìñ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Tipy-dannyh-12-16'),
                ('üìñ –í–≤–æ–¥ –∏ –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Vvod-i-vyvod-dannyh-12-16'),
                ('üìñ –§—É–Ω–∫—Ü–∏–∏', 'https://telegra.ph/Funkcii-12-16-2')
            ],
            'quiz_id': 'Bash_basic'
        },
        'Python': {
            'articles': [
                ('üìñ –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞', 'https://telegra.ph/Osnovy-sintaksisa-Python-12-16'),
                ('üìñ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Tipy-dannyh-Python-12-16'),
                ('üìñ –§—É–Ω–∫—Ü–∏–∏', 'https://telegra.ph/Funkcii-Python-12-16')
            ],
            'quiz_id': 'Python_basic'
        },
        'JavaScript': {
            'articles': [
                ('üìñ –û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞', 'https://telegra.ph/Osnovy-sintaksisa-JavaScript-12-16'),
                ('üìñ –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', 'https://telegra.ph/Tipy-dannyh-JavaScript-12-16'),
                ('üìñ –§—É–Ω–∫—Ü–∏–∏', 'https://telegra.ph/Funkcii-JavaScript-12-16')
            ],
            'quiz_id': 'JavaScript_basic'
        }
    }
    
    data = language_data.get(language, {'articles': [], 'quiz_id': None})
    
    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–µ–π
    for article_name, article_url in data['articles']:
        markup.add(types.InlineKeyboardButton(article_name, url=article_url))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if data['quiz_id']:
        markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data=f'quiz_{data["quiz_id"]}'))
    
    markup.add(types.InlineKeyboardButton('üìö –î—Ä—É–≥–∏–µ —è–∑—ã–∫–∏', callback_data='back_to_languages'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, 
                    f'üìö <b>{html.escape(language)}</b>\n\n'
                    f'–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç:', 
                    reply_markup=markup, parse_mode='HTML')
    
    user_states[str(chat_id)] = f'{language.lower()}_menu'
    save_data(user_states, USER_STATES_FILE)

def show_quiz_selection(chat_id, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
    bot.delete_message(chat_id, message_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üß† VBA - –û—Å–Ω–æ–≤—ã', callback_data='quiz_VBA_basic'))
    markup.add(types.InlineKeyboardButton('üß† C - –û—Å–Ω–æ–≤—ã', callback_data='quiz_C_basic'))
    markup.add(types.InlineKeyboardButton('üß† Bash - –û—Å–Ω–æ–≤—ã', callback_data='quiz_Bash_basic'))
    markup.add(types.InlineKeyboardButton('üß† Python - –û—Å–Ω–æ–≤—ã', callback_data='quiz_Python_basic'))
    markup.add(types.InlineKeyboardButton('üß† JavaScript - –û—Å–Ω–æ–≤—ã', callback_data='quiz_JavaScript_basic'))
    markup.add(types.InlineKeyboardButton('üìö –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, 
                    'üß† <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b>\n\n'
                    '–¢–µ—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏ –æ–ø—ã—Ç–∞!', 
                    reply_markup=markup, parse_mode='HTML')
    
    user_states[str(chat_id)] = 'quiz_selection_menu'
    save_data(user_states, USER_STATES_FILE)

def show_quiz_info(chat_id, quiz_id, message_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ"""
    bot.delete_message(chat_id, message_id)
    
    quiz = get_quiz(quiz_id)
    if not quiz:
        bot.send_message(chat_id, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    quiz_info = (
        f"üß† <b>{html.escape(quiz['title'])}</b>\n\n"
        f"üìù <i>{html.escape(quiz['description'])}</i>\n\n"
        f"‚ö° <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å:</b> {html.escape(quiz['difficulty'])}\n"
        f"‚è± <b>–í—Ä–µ–º—è:</b> {quiz['time_limit']} —Å–µ–∫—É–Ω–¥\n"
        f"üìä <b>–í–æ–ø—Ä–æ—Å–æ–≤:</b> {len(quiz['questions'])}\n"
        f"üèÜ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</b> {quiz['total_points']}\n"
        f"üéØ <b>–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª:</b> {quiz['passing_score']}\n\n"
        f"–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data=f'start_quiz_{quiz_id}'))
    markup.add(types.InlineKeyboardButton('üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, quiz_info, reply_markup=markup, parse_mode='HTML')
    user_states[str(chat_id)] = f'quiz_info_{quiz_id}'
    save_data(user_states, USER_STATES_FILE)

def start_quiz(chat_id, quiz_id, message_id):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç"""
    bot.delete_message(chat_id, message_id)
    
    quiz = get_quiz(quiz_id)
    if not quiz:
        bot.send_message(chat_id, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ç–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
    active_quizzes[chat_id] = {
        'quiz_id': quiz_id,
        'current_question': 0,
        'score': 0,
        'start_time': datetime.now(),
        'user_answers': [],
        'quiz_data': quiz
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    send_quiz_question(chat_id, 0)

def send_quiz_question(chat_id, question_index):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    if chat_id not in active_quizzes:
        return
        
    quiz_data = active_quizzes[chat_id]
    quiz = quiz_data['quiz_data']
    
    if question_index >= len(quiz['questions']):
        finish_quiz(chat_id)
        return
    
    question = quiz['questions'][question_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    markup = types.InlineKeyboardMarkup()
    
    for i, option in enumerate(question['options']):
        markup.add(types.InlineKeyboardButton(option, callback_data=f'answer_{question_index}_{i}'))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    markup.add(types.InlineKeyboardButton('‚èπ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç', callback_data='end_quiz'))
    
    question_text = (
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(quiz['questions'])}</b>\n\n"
        f"{html.escape(question['question_text'])}"
    )
    
    bot.send_message(chat_id, question_text, reply_markup=markup, parse_mode='HTML')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    active_quizzes[chat_id]['current_question'] = question_index

def handle_quiz_answer(callback):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞"""
    user_id = callback.message.chat.id
    user_id_str = str(user_id)
    
    if user_id not in active_quizzes:
        bot.answer_callback_query(callback.id, "–¢–µ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
    parts = callback.data.split('_')
    question_index = int(parts[1])
    answer_index = int(parts[2])
    
    quiz_data = active_quizzes[user_id]
    quiz = quiz_data['quiz_data']
    question = quiz['questions'][question_index]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    quiz_data['user_answers'].append({
        'question_index': question_index,
        'answer_index': answer_index,
        'is_correct': answer_index == question['correct_answer']
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
    if answer_index == question['correct_answer']:
        quiz_data['score'] += question['points']
        bot.answer_callback_query(callback.id, f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! +{question['points']} –±–∞–ª–ª–æ–≤")
    else:
        correct_answer = question['options'][question['correct_answer']]
        bot.answer_callback_query(callback.id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    bot.delete_message(user_id, callback.message.message_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    next_question_index = question_index + 1
    if next_question_index < len(quiz['questions']):
        send_quiz_question(user_id, next_question_index)
    else:
        finish_quiz(user_id)

def finish_quiz(chat_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    quiz_data = active_quizzes.pop(chat_id, None)
    if not quiz_data:
        return
    
    quiz = quiz_data['quiz_data']
    score = quiz_data['score']
    max_score = quiz['total_points']
    percentage = (score / max_score) * 100
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_after_quiz(chat_id, quiz['quiz_id'], score, max_score)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    result_text = (
        f"üéâ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        f"üß† <b>{html.escape(quiz['title'])}</b>\n"
        f"üèÜ <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score}/{max_score} –±–∞–ª–ª–æ–≤ ({percentage:.1f}%)\n\n"
    )
    
    if percentage >= 80:
        result_text += "üî• <b>–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b> –í—ã —Ö–æ—Ä–æ—à–æ –∑–Ω–∞–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª!\n"
    elif percentage >= 60:
        result_text += "üëç <b>–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</b> –ï—Å—Ç—å —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.\n"
    else:
        result_text += "üìö <b>–ù—É–∂–Ω–æ –ø–æ–¥—Ç—è–Ω—É—Ç—å –∑–Ω–∞–Ω–∏—è.</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –µ—â–µ —Ä–∞–∑.\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
    wrong_answers = [ans for ans in quiz_data['user_answers'] if not ans['is_correct']]
    if wrong_answers:
        result_text += "\nüìù <b>–†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫:</b>\n"
        for wrong in wrong_answers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –æ—à–∏–±–∫–∏
            question = quiz['questions'][wrong['question_index']]
            result_text += f"\n‚Ä¢ {html.escape(question['question_text'][:50])}...\n"
            result_text += f"  <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ:</b> {html.escape(question['options'][question['correct_answer']])}\n"
            result_text += f"  <b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</b> {html.escape(question['explanation'])}\n"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data='progress'))
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ –µ—â–µ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üìö –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, result_text, reply_markup=markup, parse_mode='HTML')

def end_quiz_early(chat_id, message_id):
    """–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    bot.delete_message(chat_id, message_id)
    
    if chat_id in active_quizzes:
        active_quizzes.pop(chat_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main'))
    
    bot.send_message(chat_id, 
                    "‚èπ <b>–¢–µ—Å—Ç –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω. –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.</b>\n\n"
                    "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!",
                    reply_markup=markup, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
@bot.message_handler(func=lambda message: user_states.get(str(message.chat.id)) == 'predlozka_menu')
def predlozka(message):
    text_predloz = message.text
    user_info = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–Ω–µ—Ç'} ({message.from_user.first_name or '–Ω–µ—Ç'})"
    
    # –í–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    print(f"üí° –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç {user_info}: {text_predloz}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    user_states[str(message.chat.id)] = 'main_menu'
    save_data(user_states, USER_STATES_FILE)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìö –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data='languages'))
    markup.add(types.InlineKeyboardButton('üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', callback_data='take_quiz'))
    markup.add(types.InlineKeyboardButton('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data='progress'))
    
    bot.send_message(message.chat.id, 
                    '‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>\n\n'
                    '–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∏ —É—á—Ç–µ–º –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–æ—Ç–∞!',
                    reply_markup=markup, parse_mode='HTML')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
import atexit
atexit.register(lambda: save_data(user_states, USER_STATES_FILE))

if __name__ == '__main__':
    print("–ë–æ—Ç CodeForge –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)