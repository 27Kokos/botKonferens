import telebot
from telebot import types
import json
import os
from datetime import datetime


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
moderator_bot = telebot.TeleBot('8339489199:AAELTq_I7ge6_3p_GQ-IeZhT8liL47v7xaI')

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
MODERATION_DB_FILE = 'moderation_db.json'
USERS_FILE = 'users.json'
USER_STATES_FILE = 'user_states.json'

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON {file_path}")
            return {}
    return {}

def save_data(data, file_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {file_path}: {e}")
        return False

def load_moderation_db():
    return load_data(MODERATION_DB_FILE)

def save_moderation_db(data):
    return save_data(data, MODERATION_DB_FILE)

def load_users():
    return load_data(USERS_FILE)

def save_users(data):
    return save_data(data, USERS_FILE)

def load_user_states():
    return load_data(USER_STATES_FILE)

def save_user_states(data):
    return save_data(data, USER_STATES_FILE)

def is_moderator(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    moderation_db = load_moderation_db()
    return user_id in moderation_db.get('moderators', [])

def get_pending_suggestions():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    moderation_db = load_moderation_db()
    return [s for s in moderation_db.get('moderation_queue', []) if s['status'] == 'pending']

def get_processed_suggestions(limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    moderation_db = load_moderation_db()
    all_suggestions = moderation_db.get('moderation_queue', [])
    processed = [s for s in all_suggestions if s['status'] in ['approved', 'rejected']]
    return sorted(processed, key=lambda x: x.get('processed_date', x['timestamp']), reverse=True)[:limit]

def update_suggestion_status(suggestion_id, status, moderator_id, response=None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    moderation_db = load_moderation_db()
    
    for suggestion in moderation_db['moderation_queue']:
        if suggestion['id'] == suggestion_id:
            suggestion['status'] = status
            suggestion['moderator_id'] = moderator_id
            suggestion['response'] = response
            suggestion['processed_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = moderation_db['suggestion_stats']
    stats['pending'] = len([s for s in moderation_db['moderation_queue'] if s['status'] == 'pending'])
    
    if status == 'approved':
        stats['approved'] += 1
    elif status == 'rejected':
        stats['rejected'] += 1
    
    return save_moderation_db(moderation_db)

def reset_user_progress(user_id, reset_type="full"):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        return False
    
    user = users[user_id_str]
    
    if reset_type == "full" or reset_type == "quizzes":
        user['progress']['quizzes_completed'] = {}
        user['stats']['quizzes_taken'] = 0
        user['stats']['average_score'] = 0
    
    if reset_type == "full" or reset_type == "articles":
        user['progress']['articles_viewed'] = {}
        user['stats']['articles_read'] = 0
        user['stats']['languages_learned'] = []
    
    if reset_type == "full" or reset_type == "points":
        user['total_points'] = 0
    
    if reset_type == "full" or reset_type == "achievements":
        user['progress']['achievements'] = []
    
    return save_users(users)

def reset_all_users_progress():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = load_users()
    
    for user_id, user_data in users.items():
        user_data['total_points'] = 0
        user_data['progress']['articles_viewed'] = {}
        user_data['progress']['quizzes_completed'] = {}
        user_data['progress']['achievements'] = []
        user_data['stats']['quizzes_taken'] = 0
        user_data['stats']['articles_read'] = 0
        user_data['stats']['average_score'] = 0
        user_data['stats']['total_reading_time'] = 0
        user_data['stats']['languages_learned'] = []
    
    return save_users(users)

def delete_all_users():
    """–£–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª users.json
    users = {}
    users_saved = save_users(users)
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª user_states.json
    user_states = {}
    states_saved = save_user_states(user_states)
    
    return users_saved and states_saved

def get_user_by_id(user_id):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    users = load_users()
    return users.get(str(user_id))

def get_all_users():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    return load_users()

@moderator_bot.message_handler(commands=['start'])
def moderator_start(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_moderator(message.chat.id):
        moderator_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìã –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', callback_data='mod_queue'))
    markup.add(types.InlineKeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', callback_data='mod_history'))
    markup.add(types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='mod_stats'))
    markup.add(types.InlineKeyboardButton('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='mod_users'))
    markup.add(types.InlineKeyboardButton('‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è', callback_data='danger_zone'))
    
    moderator_bot.send_message(
        message.chat.id,
        "üõ† <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ CodeForge</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith('mod_'))
def handle_moderator_actions(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if call.data == 'mod_queue':
        show_moderation_queue(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_history':
        show_suggestion_history(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_stats':
        show_moderation_stats(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_users':
        show_user_management(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_main':
        moderator_start(call.message)

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'danger_zone')
def show_danger_zone(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='reset_all_stats'))
    markup.add(types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='delete_all_users'))
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='mod_main'))
    
    moderator_bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ö†Ô∏è <b>–û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</b>\n\n"
             "–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–ª–∏—è—é—Ç –Ω–∞ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
             "üîÑ <b>–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b> - –æ–±–Ω—É–ª–∏—Ç –æ—á–∫–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
             "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç –±–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
             "<b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º—ã!",
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'reset_all_stats')
def handle_reset_all_stats(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data='confirm_reset_all'))
    markup.add(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='danger_zone'))
    
    moderator_bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
             "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n"
             "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
             "‚Ä¢ –û–±–Ω—É–ª–∏—Ç –≤—Å–µ –æ—á–∫–∏\n"
             "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç–∞—Ç—å—è–º\n"
             "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã\n"
             "‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
             "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
             "<b>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'confirm_reset_all')
def confirm_reset_all_stats(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    success = reset_all_users_progress()
    
    if success:
        users_count = len(get_all_users())
        text = f"‚úÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞!</b>\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω—É–ª–µ–Ω–∞."
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É', callback_data='danger_zone'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'delete_all_users')
def handle_delete_all_users(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='confirm_delete_all'))
    markup.add(types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='danger_zone'))
    
    users_count = len(get_all_users())
    
    moderator_bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
             f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?\n\n"
             f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
             f"‚Ä¢ –£–¥–∞–ª–∏—Ç {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
             f"‚Ä¢ –û—á–∏—Å—Ç–∏—Ç –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
             f"‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
             f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ\n\n"
             f"<b>–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'confirm_delete_all')
def confirm_delete_all_users(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    users_count = len(get_all_users())
    success = delete_all_users()
    
    if success:
        text = f"‚úÖ <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã!</b>\n\n–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞."
    else:
        text = "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –æ–ø–∞—Å–Ω—É—é –∑–æ–Ω—É', callback_data='danger_zone'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=markup,
        parse_mode='HTML'
    )

def show_moderation_queue(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    pending_suggestions = get_pending_suggestions()
    
    if not pending_suggestions:
        text = "üìã <b>–û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    else:
        text = f"üìã <b>–û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {len(pending_suggestions)}\n\n"
        
        for i, suggestion in enumerate(pending_suggestions[:5]):
            text += f"{i+1}. üë§ {suggestion['user_data']['first_name']}\n"
            text += f"   üí¨ {suggestion['content'][:50]}...\n"
            text += f"   ‚è∞ {suggestion['timestamp']}\n\n"
    
    markup = types.InlineKeyboardMarkup()
    if pending_suggestions:
        markup.add(types.InlineKeyboardButton('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='view_suggestions'))
    markup.add(types.InlineKeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', callback_data='mod_history'))
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_queue'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

def show_suggestion_history(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    processed_suggestions = get_processed_suggestions(10)
    
    if not processed_suggestions:
        text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    else:
        text = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
        
        for i, suggestion in enumerate(processed_suggestions):
            status_emoji = "‚úÖ" if suggestion['status'] == 'approved' else "‚ùå"
            text += f"{i+1}. {status_emoji} {suggestion['user_data']['first_name']}\n"
            text += f"   üí¨ {suggestion['content'][:50]}...\n"
            text += f"   ‚è∞ {suggestion['timestamp']}\n\n"
    
    markup = types.InlineKeyboardMarkup()
    if processed_suggestions:
        markup.add(types.InlineKeyboardButton('üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è', callback_data='view_detailed_history'))
    markup.add(types.InlineKeyboardButton('üìã –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å', callback_data='mod_queue'))
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_history'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'view_detailed_history')
def view_detailed_history(call):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    processed_suggestions = get_processed_suggestions(20)
    
    if not processed_suggestions:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    show_detailed_suggestion(call.message.chat.id, call.message.message_id, processed_suggestions[0], 0)

def show_detailed_suggestion(chat_id, message_id, suggestion, index):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    processed_suggestions = get_processed_suggestions(20)
    
    status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if suggestion['status'] == 'approved' else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    moderator_info = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {suggestion.get('moderator_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    processed_date = suggestion.get('processed_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    text = (
        f"üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b> ({index + 1}/{len(processed_suggestions)})\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {suggestion['user_data']['first_name']}\n"
        f"üìõ <b>Username:</b> @{suggestion['user_data']['username'] or '–Ω–µ—Ç'}\n"
        f"üÜî <b>ID:</b> {suggestion['user_id']}\n"
        f"‚è∞ <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {suggestion['timestamp']}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üë®‚Äçüíº <b>{moderator_info}</b>\n"
        f"‚è± <b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {processed_date}\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n{suggestion['content']}\n"
    )
    
    if suggestion.get('response'):
        text += f"\nüí≠ <b>–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b>\n{suggestion['response']}\n"
    
    markup = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', callback_data=f'history_prev_{index}'))
    if index < len(processed_suggestions) - 1:
        nav_buttons.append(types.InlineKeyboardButton('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', callback_data=f'history_next_{index}'))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton('üìú –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏', callback_data='mod_history'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith(('history_prev_', 'history_next_')))
def handle_history_navigation(call):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action, index = call.data.split('_', 2)
    current_index = int(index)
    
    processed_suggestions = get_processed_suggestions(20)
    
    if not processed_suggestions:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏")
        return
    
    if action == 'prev' and current_index > 0:
        new_index = current_index - 1
    elif action == 'next' and current_index < len(processed_suggestions) - 1:
        new_index = current_index + 1
    else:
        moderator_bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª")
        return
    
    show_detailed_suggestion(call.message.chat.id, call.message.message_id, processed_suggestions[new_index], new_index)

def show_moderation_stats(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    moderation_db = load_moderation_db()
    stats = moderation_db.get('suggestion_stats', {})
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"üì® –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('total', 0)}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved', 0)}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected', 0)}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats.get('pending', 0)}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_stats'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

def show_user_management(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    users = get_all_users()
    
    text = (
        "üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        "–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='user_list'))
    markup.add(types.InlineKeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID', callback_data='user_search'))
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_users'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
@moderator_bot.callback_query_handler(func=lambda call: call.data == 'view_suggestions')
def view_suggestions(call):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    pending_suggestions = get_pending_suggestions()
    
    if not pending_suggestions:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    show_suggestion_detail(call.message.chat.id, call.message.message_id, pending_suggestions[0], 0)

def show_suggestion_detail(chat_id, message_id, suggestion, index):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    pending_suggestions = get_pending_suggestions()
    
    text = (
        f"üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {index + 1} –∏–∑ {len(pending_suggestions)}</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {suggestion['user_data']['first_name']}\n"
        f"üìõ <b>Username:</b> @{suggestion['user_data']['username'] or '–Ω–µ—Ç'}\n"
        f"üÜî <b>ID:</b> {suggestion['user_id']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {suggestion['timestamp']}\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n{suggestion['content']}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f'approve_{suggestion["id"]}'),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_{suggestion["id"]}')
    )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ', callback_data=f'prev_{index}'))
    if index < len(pending_suggestions) - 1:
        nav_buttons.append(types.InlineKeyboardButton('‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ', callback_data=f'next_{index}'))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton('üìã –ù–∞–∑–∞–¥ –∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='mod_queue'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def handle_suggestion_decision(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action, suggestion_id = call.data.split('_', 1)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    moderation_db = load_moderation_db()
    suggestion = None
    for s in moderation_db['moderation_queue']:
        if s['id'] == suggestion_id:
            suggestion = s
            break
    
    if not suggestion:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if action == 'approve':
        update_suggestion_status(suggestion_id, 'approved', call.from_user.id)
        moderator_bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")
    else:
        update_suggestion_status(suggestion_id, 'rejected', call.from_user.id)
        moderator_bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    pending_suggestions = get_pending_suggestions()
    if pending_suggestions:
        show_suggestion_detail(call.message.chat.id, call.message.message_id, pending_suggestions[0], 0)
    else:
        show_moderation_queue(call.message.chat.id, call.message.message_id)

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith(('prev_', 'next_')))
def handle_suggestion_navigation(call):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action, index = call.data.split('_', 1)
    current_index = int(index)
    
    pending_suggestions = get_pending_suggestions()
    
    if not pending_suggestions:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    if action == 'prev' and current_index > 0:
        new_index = current_index - 1
    elif action == 'next' and current_index < len(pending_suggestions) - 1:
        new_index = current_index + 1
    else:
        moderator_bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª")
        return
    
    show_suggestion_detail(call.message.chat.id, call.message.message_id, pending_suggestions[new_index], new_index)

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'user_list')
def show_user_list(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    users = get_all_users()
    
    if not users:
        moderator_bot.send_message(call.message.chat.id, "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_ids = list(users.keys())
    show_user_detail(call.message.chat.id, call.message.message_id, users[user_ids[0]], user_ids[0], 0, user_ids)

def show_user_detail(chat_id, message_id, user, user_id, index, user_ids):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    text = (
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {index + 1}/{len(user_ids)}</b>\n\n"
        f"üÜî <b>ID:</b> {user_id}\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {user['first_name']}\n"
        f"üìõ <b>Username:</b> @{user['username'] or '–Ω–µ—Ç'}\n"
        f"üìÖ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {user['joined_date']}\n"
        f"üèÜ <b>–û—á–∫–∏:</b> {user['total_points']}\n"
        f"üìö <b>–°—Ç–∞—Ç–µ–π –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:</b> {user['stats']['articles_read']}\n"
        f"üß† <b>–¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ:</b> {user['stats']['quizzes_taken']}\n"
        f"üìà <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {user['stats']['average_score']}%\n"
        f"üåç <b>–ò–∑—É—á–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b> {', '.join(user['stats']['languages_learned']) if user['stats']['languages_learned'] else '–Ω–µ—Ç'}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    
    # –ö–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    markup.row(
        types.InlineKeyboardButton('üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å', callback_data=f'reset_full_{user_id}'),
        types.InlineKeyboardButton('üìö –°–±—Ä–æ—Å —Å—Ç–∞—Ç–µ–π', callback_data=f'reset_articles_{user_id}')
    )
    markup.row(
        types.InlineKeyboardButton('üß† –°–±—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤', callback_data=f'reset_quizzes_{user_id}'),
        types.InlineKeyboardButton('‚≠ê –°–±—Ä–æ—Å –æ—á–∫–æ–≤', callback_data=f'reset_points_{user_id}')
    )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if index > 0:
        nav_buttons.append(types.InlineKeyboardButton('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data=f'user_prev_{index}'))
    if index < len(user_ids) - 1:
        nav_buttons.append(types.InlineKeyboardButton('‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π', callback_data=f'user_next_{index}'))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    markup.add(types.InlineKeyboardButton('üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data='mod_users'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith(('user_prev_', 'user_next_')))
def handle_user_navigation(call):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    parts = call.data.split('_')
    action = parts[1]
    current_index = int(parts[2])
    
    users = get_all_users()
    user_ids = list(users.keys())
    
    if not user_ids:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    if action == 'prev' and current_index > 0:
        new_index = current_index - 1
    elif action == 'next' and current_index < len(user_ids) - 1:
        new_index = current_index + 1
    else:
        moderator_bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª")
        return
    
    show_user_detail(call.message.chat.id, call.message.message_id, users[user_ids[new_index]], user_ids[new_index], new_index, user_ids)

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith('reset_'))
def handle_reset_progress(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    parts = call.data.split('_')
    reset_type = parts[1]
    user_id = parts[2]
    
    reset_types = {
        'full': '–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
        'articles': '—Å–±—Ä–æ—Å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π', 
        'quizzes': '—Å–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤',
        'points': '–æ–±–Ω—É–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤'
    }
    
    success = reset_user_progress(int(user_id), reset_type)
    
    if success:
        moderator_bot.answer_callback_query(call.id, f"‚úÖ {reset_types[reset_type]} –≤—ã–ø–æ–ª–Ω–µ–Ω")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        users = get_all_users()
        user_ids = list(users.keys())
        if user_id in users:
            current_index = user_ids.index(user_id)
            show_user_detail(call.message.chat.id, call.message.message_id, users[user_id], user_id, current_index, user_ids)
    else:
        moderator_bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

@moderator_bot.callback_query_handler(func=lambda call: call.data == 'user_search')
def handle_user_search(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    msg = moderator_bot.send_message(call.message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    moderator_bot.register_next_step_handler(msg, process_user_search)

def process_user_search(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = int(message.text.strip())
    except ValueError:
        moderator_bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    
    user = get_user_by_id(user_id)
    if not user:
        moderator_bot.send_message(message.chat.id, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    users = get_all_users()
    user_ids = list(users.keys())
    if str(user_id) in user_ids:
        index = user_ids.index(str(user_id))
        show_user_detail(message.chat.id, None, user, str(user_id), index, user_ids)

if __name__ == "__main__":
    print("–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    moderator_bot.polling(none_stop=True)