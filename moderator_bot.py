import telebot
from telebot import types
import json
import os
from datetime import datetime


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
moderator_bot = telebot.TeleBot('8339489199:AAELTq_I7ge6_3p_GQ-IeZhT8liL47v7xaI')

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
MODERATION_DB_FILE = 'moderation_db.json'
USERS_FILE = 'users.json'

def load_data(file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON {file_path}")
            return {}
    return {}

def save_data(data, file_path):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö {file_path}: {e}")
        return False

def load_moderation_db():
    return load_data(MODERATION_DB_FILE)

def save_moderation_db(data):
    return save_data(data, MODERATION_DB_FILE)

def load_users():
    return load_data(USERS_FILE)

def save_users(data):
    return save_data(data, USERS_FILE)

def is_moderator(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    moderation_db = load_moderation_db()
    return user_id in moderation_db.get('moderators', [])

def reset_user_progress(user_id, reset_type="full"):
    """–°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = load_users()
    user_id_str = str(user_id)
    
    if user_id_str not in users:
        return False
    
    user = users[user_id_str]
    
    if reset_type == "full" or reset_type == "quizzes":
        user['progress']['quizzes_completed'] = {}
        user['stats']['quizzes_taken'] = 0
        user['stats']['average_score'] = 0
    
    if reset_type == "full" or reset_type == "articles":
        user['progress']['articles_viewed'] = {}
        user['stats']['articles_read'] = 0
        user['stats']['languages_learned'] = []
    
    if reset_type == "full" or reset_type == "points":
        user['total_points'] = 0
    
    if reset_type == "full" or reset_type == "achievements":
        user['progress']['achievements'] = []
    
    return save_users(users)

def get_pending_suggestions():
    """–ü–æ–ª—É—á–∏—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    moderation_db = load_moderation_db()
    return [s for s in moderation_db.get('moderation_queue', []) if s['status'] == 'pending']

def update_suggestion_status(suggestion_id, status, moderator_id, response=None):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    moderation_db = load_moderation_db()
    
    for suggestion in moderation_db['moderation_queue']:
        if suggestion['id'] == suggestion_id:
            suggestion['status'] = status
            suggestion['moderator_id'] = moderator_id
            suggestion['response'] = response
            suggestion['processed_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            break
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = moderation_db['suggestion_stats']
    stats['pending'] = len([s for s in moderation_db['moderation_queue'] if s['status'] == 'pending'])
    
    if status == 'approved':
        stats['approved'] += 1
    elif status == 'rejected':
        stats['rejected'] += 1
    
    return save_moderation_db(moderation_db)

@moderator_bot.message_handler(commands=['start'])
def moderator_start(message):
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_moderator(message.chat.id):
        moderator_bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìã –û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π', callback_data='mod_queue'))
    markup.add(types.InlineKeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='mod_stats'))
    markup.add(types.InlineKeyboardButton('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='mod_users'))
    
    moderator_bot.send_message(
        message.chat.id,
        "üõ† <b>–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ CodeForge</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=markup,
        parse_mode='HTML'
    )

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith('mod_'))
def handle_moderator_actions(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if call.data == 'mod_queue':
        show_moderation_queue(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_stats':
        show_moderation_stats(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_users':
        show_user_management(call.message.chat.id, call.message.message_id)
    elif call.data == 'mod_main':
        moderator_start(call.message)

def show_moderation_queue(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    pending_suggestions = get_pending_suggestions()
    
    if not pending_suggestions:
        text = "üìã <b>–û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."
    else:
        text = f"üìã <b>–û—á–µ—Ä–µ–¥—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n–û–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è: {len(pending_suggestions)}\n\n"
        
        for i, suggestion in enumerate(pending_suggestions[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            text += f"{i+1}. üë§ {suggestion['user_data']['first_name']}\n"
            text += f"   üí¨ {suggestion['content'][:50]}...\n"
            text += f"   ‚è∞ {suggestion['timestamp']}\n\n"
    
    markup = types.InlineKeyboardMarkup()
    if pending_suggestions:
        markup.add(types.InlineKeyboardButton('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', callback_data='view_suggestions'))
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_queue'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

def show_moderation_stats(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    moderation_db = load_moderation_db()
    stats = moderation_db.get('suggestion_stats', {})
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
        f"üì® –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {stats.get('total', 0)}\n"
        f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {stats.get('approved', 0)}\n"
        f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats.get('rejected', 0)}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç: {stats.get('pending', 0)}\n"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_stats'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

def show_user_management(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    users = load_users()
    
    text = (
        "üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        "–§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='user_list'))
    markup.add(types.InlineKeyboardButton('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='user_search'))
    markup.add(types.InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='mod_users'))
    markup.add(types.InlineKeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='mod_main'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

# –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
@moderator_bot.callback_query_handler(func=lambda call: call.data == 'view_suggestions')
def view_suggestions(call):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    pending_suggestions = get_pending_suggestions()
    
    if not pending_suggestions:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    show_suggestion_detail(call.message.chat.id, call.message.message_id, pending_suggestions[0])

def show_suggestion_detail(chat_id, message_id, suggestion):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    if message_id:
        moderator_bot.delete_message(chat_id, message_id)
    
    text = (
        f"üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {suggestion['user_data']['first_name']}\n"
        f"üìõ <b>Username:</b> @{suggestion['user_data']['username']}\n"
        f"üÜî <b>ID:</b> {suggestion['user_id']}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è:</b> {suggestion['timestamp']}\n\n"
        f"üí¨ <b>–¢–µ–∫—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n{suggestion['content']}\n\n"
        f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data=f'approve_{suggestion["id"]}'),
        types.InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_{suggestion["id"]}')
    )
    markup.add(types.InlineKeyboardButton('‚è≠ –°–ª–µ–¥—É—é—â–µ–µ', callback_data='view_suggestions'))
    markup.add(types.InlineKeyboardButton('üìã –ù–∞–∑–∞–¥ –∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='mod_queue'))
    
    moderator_bot.send_message(chat_id, text, reply_markup=markup, parse_mode='HTML')

@moderator_bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def handle_suggestion_decision(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é"""
    if not is_moderator(call.message.chat.id):
        moderator_bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    action, suggestion_id = call.data.split('_', 1)
    
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    moderation_db = load_moderation_db()
    suggestion = None
    for s in moderation_db['moderation_queue']:
        if s['id'] == suggestion_id:
            suggestion = s
            break
    
    if not suggestion:
        moderator_bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if action == 'approve':
        update_suggestion_status(suggestion_id, 'approved', call.from_user.id)
        moderator_bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ")
    else:
        update_suggestion_status(suggestion_id, 'rejected', call.from_user.id)
        moderator_bot.answer_callback_query(call.id, "‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    pending_suggestions = get_pending_suggestions()
    if pending_suggestions:
        show_suggestion_detail(call.message.chat.id, call.message.message_id, pending_suggestions[0])
    else:
        show_moderation_queue(call.message.chat.id, call.message.message_id)

if __name__ == '__main__':
    print("–ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω...")
    moderator_bot.polling(none_stop=True)